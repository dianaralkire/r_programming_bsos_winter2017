{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Programming for Behavioral Science: Day 1\"\nauthor: \"PSYC 798W, Scott Jackson\"\ndate: 2016-01-09\noutput: ioslides_presentation\n---\n\n# Outline\n\n## What are we doing today?\n  1. Introduce each other\n  2. Introduce R and some reasons why the course is focused on *programming*\n  3. Discuss the course goals and structure\n  4. Discuss what programming is like\n  5. Introduce the basic software toolbox\n  6. Get things installed\n  7. Discuss next steps\n\n# Intro\n\n## Introductions\nYou!\n\n  - pair up with the person next to you\n  - ask them:\n    1. Their name\n    2. Their major\n    3. One interesting piece of trivia\n    4. What they're hoping to get out of the course\n  - take notes (seriously!)\n  - report to the class (and listen to each other)\n  - email me your notes (scottrj@umd.edu)\n\n## Introductions {.smaller}\nMe:\n\n  - Associate Research Scientist at Center for Advanced Study of Language\n  - PhD in Linguistics (psycholing, theoretical ling, prosody)\n  - Light on formal training in stats/programming\n    - \"stats for linguists\" course (ANOVA)\n    - \"programming for linguists\" course (Perl)\n  - Heavy on self-teaching\n    - 9+ years using R\n    - more advanced stats (mixed-effects models, Bayesian modeling, etc.)\n    - LaTeX, Emacs, org-mode, etc.\n  - Current work heavy on data analysis & visualization\n  - Applied work with real-world implications (aptitude testing)\n  - Learned \"the hard way\", hoping to help smooth the learning curve for you\n\n## What is R?\n  - programming language\n  - statistical software package\n  - platform for data analysis\n    - stats\n    - graphics\n    - interface with other languages (FORTRAN, C, etc.)\n  - ecosystem\n    - packages (9870 on [CRAN](http://cran.r-project.org/web/packages/) and counting! Last year this time, it was 7726)\n    - user community\n\n## Why *programming*?\nProgramming gives you *superpowers*:\n\n   - ability to do completely new things\n   - ability to replicate your work\n   - ability to re-use code and get more done\n\nCute motivational video (watch later sometime):\n\nhttps://www.youtube.com/watch?v=nKIu9yen5nc\n\nWe will be learning to *program* in R\n\n## What does it mean to \"program in R\"?\n   - R commands are code\n   - No *technical* distinction between \"user\" and \"programmer\"\n   - Approaching R like a \"free, command line alternative to SPSS\" is limiting, frustrating\n   - Learning to think about R like a programmer is liberating, empowering\n   - Good code is re-usable, expandable\n\n## Developing useful code\n   - Start with limited-case code\n     - specific analyses\n     - isolated scripts\n   - Develop more general-use code\n     - functions\n     - packages\n   - Develop *new* things\n     - make life easier\n     - make life more interesting\n\n## The R Programming Proficiency Scale | (made up completely)\n\n1: Cookbook\n\n2: Basic console $\\leftarrow$ where many people stop\n\n3: Scripts (and/or notebooks)\n\n4: Writing functions $\\leftarrow$ we will get at least to here\n\n4+: Creating and extending classes\n\n5: Writing packages\n\n# Course goals and structure\n\n## General course approach\n   - emphasis on practical use and benefits\n   - skill-building\n   - iterative, cumulative\n   - interactive, flexible $\\rightarrow$ not set in stone!\n   - end-goal: produce something useful/interesting for YOU\n   \n## Intended course pace\n  - start at the VERY bottom\n  - chance to revise your assumptions\n  - move VERY quickly\n    - more opportunities to practice\n    - solidify understanding over the course\n  - YOU control\n    - ask questions\n    - ask for additional stuff\n    - ask for review\n\n## Class session structure\nTypical class split into four parts:\n\n1. Review: go over previous homework, answer outstanding questions\n2. Lecture: me talking, you interrupting (often, I hope!) to ask questions, building on the previous day's reading\n3. Practice: you trying something based on the lecture/readings\n3. Follow-up (and expand): discuss what broke during the Practice, go deeper (if time allows)\n\n## Assessment structure\n  - Three major components:\n    1. In-class Practices\n    2. Homework\n    3. Final project\n  - Grading scheme:\n    - A = Completed all components\n    - B = Completed two components\n    - C = Completed one component\n    - D = Did some work but did not complete any components\n    - F = Left out one or more components entirely\n    \n## Completing Practice\n  - the Practice component is \"complete\" if you complete 7/10 IN-CLASS Practices\n  - de facto attendance\n  - some Practice may require code submission\n  - code submissions will only count if submitted during class\n  - not graded for \"correctness\", only completion\n  - should be automatic if you come to class\n  - no \"excused absences\", thus the 7/10 leeway\n  - HIGHLY extenuating circumstances can be discussed with me, and will require hospital notes, etc.\n    \n## Completing Homework {.smaller}\n  - the Homework component is \"complete\" if you complete 7/10 assignments\n  - code submissions due by 9am sharp the next class day after Homework is assigned\n  - code submissions will be either by email or by pushing to a repository\n    - described and specified for each assignment, not by choice/convenience\n  - time stamps on email/pushed changes will determine if it's on time\n  - Homework is \"graded\"\n    - assignment considered complete only if:\n      - the objective is completed\n      AND\n      - the results can be replicated by the instructor\n    - Homework code will be commented and given feedback by instructor\n  - What if you get stuck?  **CHEAT!!!**\n    - Post questions online\n    - Compare notes with other students\n    \n## Completing the Final Project {.smaller}\n  - the Final Project has several requirements:\n    - proposal due 11:59 PM EST, Sunday, January 10\n    - proposal revision (if needed) due by time specified by instructor, but no later than 11:59 PM EST, Sunday January 17\n    - final code due 11:59 PM EST, Thursday, January 21\n    - interesting data set (see requirements for first Homework)\n  - Analysis results in one or more of:\n    - numerical results\n    - complex object (like a regression)\n    - graphical results (e.g., plots)\n  - Analysis reported and described with thorough documentation of each step\n    - should enable someone to replicate analysis, even without code\n  - Some \"non-trivial\" element not explicitly covered in class\n    \n## Completing the Final Project\n  - \"Non-trivial\" elements could include:\n    - Data: especially mess/big/complex data\n    - Analysis: significant programming aspect to analysis (e.g., simulation)\n    - Results: tricky visualization, novel way of reporting results\n    - Code: useful new functions that would be of use and interest to other people\n  - Code will be posted to GitHub (or other agreed-on repository)\n    - code will acccomplish what is in the proposal\n    - code will enable the instructor to completely replicate the results\n\n# Some programming basics\n\n## Basic GUI workflow\n   1. Open a file with a program (Excel, SPSS, Word, etc.)\n   2. Execute commands by clicking on things, typing\n   3. Save results/output by modifying file(s)\n\n## Basic R workflow {.smaller}\n   1. *Start R*\n      - different interfaces available to run R\n   2. *Read in data*\n      - \"read data\", not \"open files\"\n   3. *Write & run R code to interact with data*\n      - Iterative process\n      - Simple or complex\n   4. *Get output*\n      - Results in console\n      - Graphics\n      - Writing results to a (simple) file\n      - Fully-reproducible papers/slides/blogs/whatever\n      \n## Programming/analysis workflow\n   1. Set goals/questions\n   2. Start R\n   3. Assemble stuff you need: files, data, etc.\n   4. Read/format/munge data\n   5. Try something\n   6. Figure out what went wrong\n   7. Try something else\n   8. Repeat steps 3 through 7 in some order...\n\n## Programming/analysis workflow\n[Move fast and break things](http://xkcd.com/1428/)\n\nThings to strive for:\n\n  - experimental approach\n  - quick iteration cycle\n  - learn from mistakes\n\n## Programming habits to build\n  - write code incrementally\n    - start small\n  - test often\n  - expect bugs (expect things to break)\n  - debugging = puzzle-solving\n  - copy, steal, and cheat\n    - copy other people's code and methods\n    - steal ideas and implementations and useful code (with attribution!)\n    - find useful ways to \"cheat\"\" and create shortcuts for yourself\n\n# The Toolbox\n\n## Toolbox Overview\n  - R is most effective when integrating other tools\n  - Three essentials:\n    - Run code: the base R program to interpret and run code\n    - Edit code efficiently: a good editor or *interface* to R\n    - Track your edits: effective use of version control software\n\n## Running R\n  - Programming languages need an interpreter/compiler to run human-readable code\n  - In some languages, programs are built, then compiled/interpreted/executed\n  - R is designed to be *interactive*\n    - immediate execution of commands\n    - iterative approach\n    - extremely useful for data analysis\n  - The R *language* is interpreted and executed by the open  -source R *software*\n  - Some other versions exist ([Revolution R](http://www.revolutionanalytics.com/), [pqR](http://www.pqr-project.org/), [Renjin](http://www.renjin.org/), etc.)\n  - We will stick with \"regular\" R, aka GNU R\n\n## Interfaces\n   - Bare bones: the R console\n   - Better: a functional script editor (e.g., `Rgui.exe`)\n   - Best: a fully-integrated text editor\n     - syntax highlighting\n     - supports interaction with active console\n     - good editing features\n     - other bells & whistles\n     \n## Two excellent interfaces\n[RStudio](http://www.rstudio.com/): the best dedicated R editor\n\n  - Pros:\n    - free & open source\n    - fairly flexible (can support different workstyles)\n    - supports reproducibility through integration with `knitr` and version control (`git` and `SVN`)\n    - several R-specific conveniences\n    - easy to use\n    - RStudio team includes several R \"luminaries\"\n  - Cons:\n    - not great as a general-purpose editor\n\n## Two excellent interfaces\n[Emacs](http://www.gnu.org/software/emacs/): one of the best text editors of all time\n\n  - Pros:\n    - free & open source\n    - integrates very well with R using the ESS package\n    - infinitely flexible\n    - works well for virtually *any* kind of text/code editing\n    - many \"killer\" features work even better than in RStudio\n    - you can do pretty much [anything](http://xkcd.com/378/) in Emacs\n  - Cons:\n    - learning curve\n    - nerd jokes\n       \n## RStudio demo\n\n## Emacs demo\n\n## Version control\nWhat is version control software?\n\n- Tracks changes in code and other files\n- Provides a \"universal 'back' button\" for entire projects\n- Helps with collaboration on complex projects\n- Promotes good habits\n- Can quickly save you immense amounts of pain & suffering\n\n## Introducing `git`\n- Different version control software (VCS) packages exist\n- We will use the `git` VCS:\n  - extremely powerful (you will never \"outgrow\" it)\n  - relatively low overhead -- can be useful with some very simple commands \n  - integrates nicely with both RStudio and Emacs\n  - cross-platform, free, and open-source\n  - opens up additional world of R packages and development on GitHub\n\n# Installation\n\n## Installing R\n  - Go to http://www.r-project.org/\n  - Follow the CRAN link\n  - Select a mirror (hosting site)\n  - Follow the links and instructions for your OS\n  - GO!\n\n## Installing RStudio\n  - Go to http://www.rstudio.com/\n  - Download the free \"desktop\" version for your OS\n  - GO!\n\n## Installing Emacs + ESS\n  - Linux: use your package manager to download\n    - e.g. `sudo apt-get install emacs24`\n  - Windows/Mac (easy version):\n    - Go straight to Vincent Goulet's site http://vgoulet.act.ulaval.ca/en/emacs/\n    - Download for your OS\n    - Comes with ESS and some other handy things\n    - See me for details on how to get started\n\n## Installing git\n  - Go to http://git-scm.com/\n  - Click the download button\n  - Follow installation instructions\n    - For Windows especially, follow \"recommendations\", e.g. installing the Git Bash\n  - Set up `git config`\n    - Open a command-line shell (or \"git shell\", if you installed one)\n    - type: `git version` to check that it installed\n    - type: `git config --global user.name \"Your Name\"`\n    - type: `git config --global user.email your@email`\n\n## GitHub {.smaller}\n  - [GitHub](https://github.com/) is a hosting site for code (and other projects)\n  - Using `git` does not require GitHub (or any other hosting site) -- it can be used completely \"locally\"\n  - GitHub adds some convenient wrappers and interfaces, especially for collaboration\n  - GitHub is a popular place for many R developers to post code, packages, etc.\n  - GitHub accounts are free for \"public\" repos\n  - If you want private repos, you can pay a small fee\n  - We will use GitHub to facilitate commenting on homework\n    - You will post your homework to your own GitHub repo\n    - I will \"fork\" the repo, make comments/changes, and then submit a \"pull request\", which you will be able to see, comment on, and incorporate into your code\n  - [BitBucket](https://bitbucket.org/) is another option\n  \n## Signing up on GitHub\n  - Go to https://github.com/\n  - Follow the instructions to sign up\n  - For convenience (not necessity), use the email you set in `git config`\n    \n  \n## Testing and troubleshooting\n  - Start \"vanilla\" R GUI\n    - Blue console\n    - Bare bones\n  - Open RStudio\n  - Type something in the console, like\n  \n```{r results = \"hide\"}\n2 + 2\n```\n\n## Testing version control\n  - If you haven't already, `git config` for name and email\n  - In RStudio, go to File > New Project...\n  - Version Control\n  - Git\n  - https://github.com/scottrjackson/r_programming_bsos_winter2016.git\n\n# Next steps\n\n## Practices and Homework\n  - Practices:\n    - in-class\n    - structured\n    - everyone does the same thing\n    - reviewed and discussed immediately\n  - Homework:\n    - extension of Practice/Lectures/Readings\n    - on your OWN data\n    - everyone does something slightly different\n    - evaluated based on whether you completed the task for your data\n    - collaboration and \"cheating/stealing\" encouraged!\n\n## Homework and final project\n  - Your final project will be a full-blown reproducible report of an interesting analysis on some data of your choosing.\n  - It will represent a cumulative application of what we cover in the course.\n  - You will extend it in some way that is not covered directly in class.\n  - The homework assignments are designed to help you build towards this goal.\n\n## Today's homework\n  1. Finish with any installation/sign-up steps that you did not complete already\n  2. (optional) Run through the installation process again\n    - getting a friend set up\n    - installing on another computer (e.g., desktop)\n    - re-installing on your computer\n  3. (required) Find a data set!\n  \n## Finding a data set {.smaller}\n  - Take some time to find a good data set\n  - For use throughout the rest of the course & the final project\n  - Requirements:\n    - multivariate (i.e., a bunch of records/rows, each with multiple variables/columns)\n    - mix of data types (two or more of the following):\n      - continuous or semi-continuous numbers\n      - categorical factors or groupings\n      - string/text data\n      - dates or timestamps\n    - interesting enough to keep you asking questions!\n  - Changing data sets later is okay, but highly dispreferred \n  - (see the first bullet!)\n\n## Some places to look\n  - Your own work!\n  - [Google](http://lmgtfy.com/?q=public+data+sets) \n  - R has lots of built-in data sets (also available in many packages)\n  - You can see all the available data sets in R by typing the command:\n\n```{r}\ndata()\n```\n\n  - If one of the R data sets catches your eye, talk to me if you need some basic commands to take a peek at it.\n\n## Send it to me {.smaller}\n  - Email me the data set\n  - If it's really large, send me a link\n  - Email me:\n    - List of variables you're interested in, with column names, plain English descriptions, and the TYPE of data in each variable (number, factor, text, time)\n    - ONE sentence describing why this data is interesting to you\n    - THREE initial questions you think you could ask and (at least partially) address with this data. Try to make the questions as SIMPLE as possible!\n  - I will reply with comments, and suggestions for changes if needed.\n  - This is the ONE assignment you can \"re-do\" later for credit, if I ask you to do something different.\n  - BEFORE 9am 1/5/2015 (I will check email timestamps)\n  - Even if you're not 100% decided, send me the above info for some possibility, by 9am, to receive credit\n\n# FIN (questions?)\n",
    "created" : 1483933964878.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2399690045",
    "id" : "59073F34",
    "lastKnownWriteTime" : 1483934250,
    "last_content_update" : 1483934371435,
    "path" : "~/projects/r_programming_bsos_winter2017/day01/day01_lecture.Rmd",
    "project_path" : "day01/day01_lecture.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}